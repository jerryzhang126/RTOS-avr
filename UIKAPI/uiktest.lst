
uiktest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000ec6  00000f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001cc  00800068  00800068  00000f62  2**0
                  ALLOC
  3 .stab         00003720  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001910  00000000  00000000  00004684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 33       	cpi	r26, 0x34	; 52
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  8a:	0c 94 61 07 	jmp	0xec2	; 0xec2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <d>:
          PORTB = aux;
   }
}
void d(){
        while(1){
                UIKRaiseEvent(1);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 55 04 	call	0x8aa	; 0x8aa <UIKRaiseEvent>
                UIKDelay(1000);
  98:	88 ee       	ldi	r24, 0xE8	; 232
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	0e 94 8e 03 	call	0x71c	; 0x71c <UIKDelay>
  a0:	f8 cf       	rjmp	.-16     	; 0x92 <d>

000000a2 <c>:
          UIKSemPost(sem);
          UIKDelay(2000);
   }
}

void c(){
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	c9 e1       	ldi	r28, 0x19	; 25
  aa:	d0 e0       	ldi	r29, 0x00	; 0
          UIKAssocEvent(1);
          uint8_t aux = PORTB;
          for(j = 0; j < 5; j++){
                PORTB = 0x00;
                _delay_ms(300);
                PORTB = 0xff;
  ac:	1f ef       	ldi	r17, 0xFF	; 255
}

void c(){
  int j;
  while(1){
          UIKAssocEvent(1);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 1c 04 	call	0x838	; 0x838 <UIKAssocEvent>
          uint8_t aux = PORTB;
  b4:	48 b3       	in	r20, 0x18	; 24
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
          for(j = 0; j < 5; j++){
                PORTB = 0x00;
  ba:	18 ba       	out	0x18, r1	; 24
  bc:	28 eb       	ldi	r18, 0xB8	; 184
  be:	3b e0       	ldi	r19, 0x0B	; 11
  c0:	fe 01       	movw	r30, r28
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <c+0x20>
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d1 f7       	brne	.-12     	; 0xc0 <c+0x1e>
                _delay_ms(300);
                PORTB = 0xff;
  cc:	18 bb       	out	0x18, r17	; 24
  ce:	28 eb       	ldi	r18, 0xB8	; 184
  d0:	3b e0       	ldi	r19, 0x0B	; 11
  d2:	fe 01       	movw	r30, r28
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <c+0x32>
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	d1 f7       	brne	.-12     	; 0xd2 <c+0x30>
  de:	01 97       	sbiw	r24, 0x01	; 1
void c(){
  int j;
  while(1){
          UIKAssocEvent(1);
          uint8_t aux = PORTB;
          for(j = 0; j < 5; j++){
  e0:	61 f7       	brne	.-40     	; 0xba <c+0x18>
                PORTB = 0x00;
                _delay_ms(300);
                PORTB = 0xff;
                _delay_ms(300);
          }
          PORTB = aux;
  e2:	48 bb       	out	0x18, r20	; 24
   }
  e4:	e4 cf       	rjmp	.-56     	; 0xae <c+0xc>

000000e6 <b>:
          UIKSemPost(sem);
          UIKDelay(1000);
  }
}

void b(){
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  while(1){
          PORTB = 0xff;
  ec:	1f ef       	ldi	r17, 0xFF	; 255
  ee:	c9 e1       	ldi	r28, 0x19	; 25
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	18 bb       	out	0x18, r17	; 24
  f4:	88 eb       	ldi	r24, 0xB8	; 184
  f6:	9b e0       	ldi	r25, 0x0B	; 11
  f8:	fe 01       	movw	r30, r28
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <b+0x14>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	d9 f7       	brne	.-10     	; 0xf8 <b+0x12>
          _delay_ms(300);
          UIKSemPend(sem);
 102:	80 91 19 02 	lds	r24, 0x0219
 106:	90 91 1a 02 	lds	r25, 0x021A
 10a:	0e 94 c9 03 	call	0x792	; 0x792 <UIKSemPend>
          while(PORTB != 0x00){
 10e:	0a c0       	rjmp	.+20     	; 0x124 <b+0x3e>
                PORTB = (PORTB >> 1);
 110:	88 b3       	in	r24, 0x18	; 24
 112:	86 95       	lsr	r24
 114:	88 bb       	out	0x18, r24	; 24
 116:	88 eb       	ldi	r24, 0xB8	; 184
 118:	9b e0       	ldi	r25, 0x0B	; 11
 11a:	fe 01       	movw	r30, r28
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <b+0x36>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	d9 f7       	brne	.-10     	; 0x11a <b+0x34>
void b(){
  while(1){
          PORTB = 0xff;
          _delay_ms(300);
          UIKSemPend(sem);
          while(PORTB != 0x00){
 124:	88 b3       	in	r24, 0x18	; 24
 126:	88 23       	and	r24, r24
 128:	99 f7       	brne	.-26     	; 0x110 <b+0x2a>
                PORTB = (PORTB >> 1);
                _delay_ms(300);
          }
          UIKSemPost(sem);
 12a:	80 91 19 02 	lds	r24, 0x0219
 12e:	90 91 1a 02 	lds	r25, 0x021A
 132:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <UIKSemPost>
          UIKDelay(2000);
 136:	80 ed       	ldi	r24, 0xD0	; 208
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	0e 94 8e 03 	call	0x71c	; 0x71c <UIKDelay>
   }
 13e:	d9 cf       	rjmp	.-78     	; 0xf2 <b+0xc>

00000140 <a>:
#include <avr/interrupt.h>

UIKSem* sem;


void a(){
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
  while(1){
          PORTB = 0xff;
 146:	1f ef       	ldi	r17, 0xFF	; 255
 148:	c9 e1       	ldi	r28, 0x19	; 25
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	18 bb       	out	0x18, r17	; 24
 14e:	88 eb       	ldi	r24, 0xB8	; 184
 150:	9b e0       	ldi	r25, 0x0B	; 11
 152:	fe 01       	movw	r30, r28
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <a+0x14>
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	d9 f7       	brne	.-10     	; 0x152 <a+0x12>
          _delay_ms(300);
          UIKSemPend(sem);
 15c:	80 91 19 02 	lds	r24, 0x0219
 160:	90 91 1a 02 	lds	r25, 0x021A
 164:	0e 94 c9 03 	call	0x792	; 0x792 <UIKSemPend>
          while(PORTB != 0x00){
 168:	0a c0       	rjmp	.+20     	; 0x17e <a+0x3e>
                PORTB = (PORTB << 1);
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	88 0f       	add	r24, r24
 16e:	88 bb       	out	0x18, r24	; 24
 170:	88 eb       	ldi	r24, 0xB8	; 184
 172:	9b e0       	ldi	r25, 0x0B	; 11
 174:	fe 01       	movw	r30, r28
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <a+0x36>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	d9 f7       	brne	.-10     	; 0x174 <a+0x34>
void a(){
  while(1){
          PORTB = 0xff;
          _delay_ms(300);
          UIKSemPend(sem);
          while(PORTB != 0x00){
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	88 23       	and	r24, r24
 182:	99 f7       	brne	.-26     	; 0x16a <a+0x2a>
                PORTB = (PORTB << 1);
                _delay_ms(300);
          }
          UIKSemPost(sem);
 184:	80 91 19 02 	lds	r24, 0x0219
 188:	90 91 1a 02 	lds	r25, 0x021A
 18c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <UIKSemPost>
          UIKDelay(1000);
 190:	88 ee       	ldi	r24, 0xE8	; 232
 192:	93 e0       	ldi	r25, 0x03	; 3
 194:	0e 94 8e 03 	call	0x71c	; 0x71c <UIKDelay>
  }
 198:	d9 cf       	rjmp	.-78     	; 0x14c <a+0xc>

0000019a <main>:

int main(void) {
  int id;


  DDRB = 0xff;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	87 bb       	out	0x17, r24	; 23
  sem = UIKSemCreate(1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 a7 03 	call	0x74e	; 0x74e <UIKSemCreate>
 1a4:	90 93 1a 02 	sts	0x021A, r25
 1a8:	80 93 19 02 	sts	0x0219, r24
  
  UIKInitialize(TICKLEN, 5); 
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	97 e2       	ldi	r25, 0x27	; 39
 1b0:	65 e0       	ldi	r22, 0x05	; 5
 1b2:	0e 94 9d 02 	call	0x53a	; 0x53a <UIKInitialize>

  id = UIKAddTask(&a, 30, a_stack, MIN_STACK_SIZE); 
 1b6:	80 ea       	ldi	r24, 0xA0	; 160
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	6e e1       	ldi	r22, 0x1E	; 30
 1bc:	48 e6       	ldi	r20, 0x68	; 104
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	25 e5       	ldi	r18, 0x55	; 85
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UIKAddTask>
  UIKRun(id);
 1c8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UIKRun>
  
  id = UIKAddTask(&b, 35, b_stack, MIN_STACK_SIZE); 
 1cc:	83 e7       	ldi	r24, 0x73	; 115
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	63 e2       	ldi	r22, 0x23	; 35
 1d2:	4d eb       	ldi	r20, 0xBD	; 189
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	25 e5       	ldi	r18, 0x55	; 85
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UIKAddTask>
  UIKRun(id);
 1de:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UIKRun>
  
  id = UIKAddTask(&c, 20, c_stack, MIN_STACK_SIZE); 
 1e2:	81 e5       	ldi	r24, 0x51	; 81
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	64 e1       	ldi	r22, 0x14	; 20
 1e8:	42 e1       	ldi	r20, 0x12	; 18
 1ea:	51 e0       	ldi	r21, 0x01	; 1
 1ec:	25 e5       	ldi	r18, 0x55	; 85
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UIKAddTask>
  UIKRun(id);
 1f4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UIKRun>
  
  id = UIKAddTask(&d, 25, d_stack, MIN_STACK_SIZE); 
 1f8:	89 e4       	ldi	r24, 0x49	; 73
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	69 e1       	ldi	r22, 0x19	; 25
 1fe:	47 e6       	ldi	r20, 0x67	; 103
 200:	51 e0       	ldi	r21, 0x01	; 1
 202:	25 e5       	ldi	r18, 0x55	; 85
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UIKAddTask>
  UIKRun(id);
 20a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UIKRun>

  /*this enables interupts, so doesn't need to be done in main */
  UIKStart();
 20e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <UIKStart>
  return 0;
}
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	08 95       	ret

00000218 <UIKIdle>:


volatile uint8_t *assocEvents[MAX_EVENTS];


void UIKIdle(){
 218:	ff cf       	rjmp	.-2      	; 0x218 <UIKIdle>

0000021a <UIKTick>:
}


void UIKTick(){
  int i;
  UIKTickNum++;
 21a:	80 91 bc 01 	lds	r24, 0x01BC
 21e:	90 91 bd 01 	lds	r25, 0x01BD
 222:	a0 91 be 01 	lds	r26, 0x01BE
 226:	b0 91 bf 01 	lds	r27, 0x01BF
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	a1 1d       	adc	r26, r1
 22e:	b1 1d       	adc	r27, r1
 230:	80 93 bc 01 	sts	0x01BC, r24
 234:	90 93 bd 01 	sts	0x01BD, r25
 238:	a0 93 be 01 	sts	0x01BE, r26
 23c:	b0 93 bf 01 	sts	0x01BF, r27
 240:	e0 91 1b 02 	lds	r30, 0x021B
 244:	f0 91 1c 02 	lds	r31, 0x021C
  for(i = 0; i < taskNum; i++) {
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
    //decrement delays where necessary
    if(tcb[i].delay > 0) {
	  tcb[i].delay--;
	  if(tcb[i].delay == 0) {
	    //the state should have been waiting
	    tcb[i].state = eReady;
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	50 e0       	ldi	r21, 0x00	; 0


void UIKTick(){
  int i;
  UIKTickNum++;
  for(i = 0; i < taskNum; i++) {
 250:	20 c0       	rjmp	.+64     	; 0x292 <UIKTick+0x78>
    //decrement delays where necessary
    if(tcb[i].delay > 0) {
 252:	85 81       	ldd	r24, Z+5	; 0x05
 254:	96 81       	ldd	r25, Z+6	; 0x06
 256:	a7 81       	ldd	r26, Z+7	; 0x07
 258:	b0 85       	ldd	r27, Z+8	; 0x08
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	a1 05       	cpc	r26, r1
 25e:	b1 05       	cpc	r27, r1
 260:	a9 f0       	breq	.+42     	; 0x28c <UIKTick+0x72>
	  tcb[i].delay--;
 262:	85 81       	ldd	r24, Z+5	; 0x05
 264:	96 81       	ldd	r25, Z+6	; 0x06
 266:	a7 81       	ldd	r26, Z+7	; 0x07
 268:	b0 85       	ldd	r27, Z+8	; 0x08
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	a1 09       	sbc	r26, r1
 26e:	b1 09       	sbc	r27, r1
 270:	85 83       	std	Z+5, r24	; 0x05
 272:	96 83       	std	Z+6, r25	; 0x06
 274:	a7 83       	std	Z+7, r26	; 0x07
 276:	b0 87       	std	Z+8, r27	; 0x08
	  if(tcb[i].delay == 0) {
 278:	85 81       	ldd	r24, Z+5	; 0x05
 27a:	96 81       	ldd	r25, Z+6	; 0x06
 27c:	a7 81       	ldd	r26, Z+7	; 0x07
 27e:	b0 85       	ldd	r27, Z+8	; 0x08
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	a1 05       	cpc	r26, r1
 284:	b1 05       	cpc	r27, r1
 286:	11 f4       	brne	.+4      	; 0x28c <UIKTick+0x72>
	    //the state should have been waiting
	    tcb[i].state = eReady;
 288:	51 83       	std	Z+1, r21	; 0x01
 28a:	40 83       	st	Z, r20


void UIKTick(){
  int i;
  UIKTickNum++;
  for(i = 0; i < taskNum; i++) {
 28c:	2f 5f       	subi	r18, 0xFF	; 255
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
 290:	39 96       	adiw	r30, 0x09	; 9
 292:	80 91 c3 01 	lds	r24, 0x01C3
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	28 17       	cp	r18, r24
 29a:	39 07       	cpc	r19, r25
 29c:	d4 f2       	brlt	.-76     	; 0x252 <UIKTick+0x38>
	    //the state should have been waiting
	    tcb[i].state = eReady;
	  }	
    }
  }
}
 29e:	08 95       	ret

000002a0 <UIKDispatcher>:
  int high = IDLE_ID;
  int i;

  for(i = 0; i < taskNum; i++) {
	//find highest priority ready task
    if(tcb[i].state == eReady && tcb[i].priority < tcb[high].priority) {
 2a0:	40 91 1b 02 	lds	r20, 0x021B
 2a4:	50 91 1c 02 	lds	r21, 0x021C
 2a8:	da 01       	movw	r26, r20
void UIKDispatcher() {

  int high = IDLE_ID;
  int i;

  for(i = 0; i < taskNum; i++) {
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
}


void UIKDispatcher() {

  int high = IDLE_ID;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
  int i;

  for(i = 0; i < taskNum; i++) {
 2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <UIKDispatcher+0x48>
	//find highest priority ready task
    if(tcb[i].state == eReady && tcb[i].priority < tcb[high].priority) {
 2b4:	6d 91       	ld	r22, X+
 2b6:	7c 91       	ld	r23, X
 2b8:	11 97       	sbiw	r26, 0x01	; 1
 2ba:	61 30       	cpi	r22, 0x01	; 1
 2bc:	71 05       	cpc	r23, r1
 2be:	89 f4       	brne	.+34     	; 0x2e2 <UIKDispatcher+0x42>
 2c0:	12 96       	adiw	r26, 0x02	; 2
 2c2:	7c 91       	ld	r23, X
 2c4:	12 97       	sbiw	r26, 0x02	; 2
 2c6:	fc 01       	movw	r30, r24
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	6a 95       	dec	r22
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <UIKDispatcher+0x2a>
 2d2:	e8 0f       	add	r30, r24
 2d4:	f9 1f       	adc	r31, r25
 2d6:	e4 0f       	add	r30, r20
 2d8:	f5 1f       	adc	r31, r21
 2da:	62 81       	ldd	r22, Z+2	; 0x02
 2dc:	76 17       	cp	r23, r22
 2de:	08 f4       	brcc	.+2      	; 0x2e2 <UIKDispatcher+0x42>
 2e0:	c9 01       	movw	r24, r18
void UIKDispatcher() {

  int high = IDLE_ID;
  int i;

  for(i = 0; i < taskNum; i++) {
 2e2:	2f 5f       	subi	r18, 0xFF	; 255
 2e4:	3f 4f       	sbci	r19, 0xFF	; 255
 2e6:	19 96       	adiw	r26, 0x09	; 9
 2e8:	60 91 c3 01 	lds	r22, 0x01C3
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	26 17       	cp	r18, r22
 2f0:	37 07       	cpc	r19, r23
 2f2:	04 f3       	brlt	.-64     	; 0x2b4 <UIKDispatcher+0x14>
    if(tcb[i].state == eReady && tcb[i].priority < tcb[high].priority) {
	  high = i;
	}
  }

  currentTask = high;
 2f4:	80 93 2f 02 	sts	0x022F, r24
  currentTCB = tcb[high].contextPtr;
 2f8:	9c 01       	movw	r18, r24
 2fa:	43 e0       	ldi	r20, 0x03	; 3
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	4a 95       	dec	r20
 302:	e1 f7       	brne	.-8      	; 0x2fc <UIKDispatcher+0x5c>
 304:	28 0f       	add	r18, r24
 306:	39 1f       	adc	r19, r25
 308:	e0 91 1b 02 	lds	r30, 0x021B
 30c:	f0 91 1c 02 	lds	r31, 0x021C
 310:	e2 0f       	add	r30, r18
 312:	f3 1f       	adc	r31, r19
 314:	83 81       	ldd	r24, Z+3	; 0x03
 316:	94 81       	ldd	r25, Z+4	; 0x04
 318:	90 93 2e 02 	sts	0x022E, r25
 31c:	80 93 2d 02 	sts	0x022D, r24
  
}
 320:	08 95       	ret

00000322 <__vector_7>:
 * UIKTickHandler
 */

ISR(TIMER1_COMPA_vect, ISR_NAKED){

  saveContext();
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	0f 92       	push	r0
 32a:	1f 92       	push	r1
 32c:	11 24       	eor	r1, r1
 32e:	2f 92       	push	r2
 330:	3f 92       	push	r3
 332:	4f 92       	push	r4
 334:	5f 92       	push	r5
 336:	6f 92       	push	r6
 338:	7f 92       	push	r7
 33a:	8f 92       	push	r8
 33c:	9f 92       	push	r9
 33e:	af 92       	push	r10
 340:	bf 92       	push	r11
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	ef 93       	push	r30
 368:	ff 93       	push	r31
 36a:	a0 91 2d 02 	lds	r26, 0x022D
 36e:	b0 91 2e 02 	lds	r27, 0x022E
 372:	0d b6       	in	r0, 0x3d	; 61
 374:	0d 92       	st	X+, r0
 376:	0e b6       	in	r0, 0x3e	; 62
 378:	0d 92       	st	X+, r0
  UIKTick();
 37a:	0e 94 0d 01 	call	0x21a	; 0x21a <UIKTick>
  UIKDispatcher();
 37e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UIKDispatcher>
  restoreContext();
 382:	a0 91 2d 02 	lds	r26, 0x022D
 386:	b0 91 2e 02 	lds	r27, 0x022E
 38a:	cd 91       	ld	r28, X+
 38c:	cd bf       	out	0x3d, r28	; 61
 38e:	dd 91       	ld	r29, X+
 390:	de bf       	out	0x3e, r29	; 62
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	bf 90       	pop	r11
 3bc:	af 90       	pop	r10
 3be:	9f 90       	pop	r9
 3c0:	8f 90       	pop	r8
 3c2:	7f 90       	pop	r7
 3c4:	6f 90       	pop	r6
 3c6:	5f 90       	pop	r5
 3c8:	4f 90       	pop	r4
 3ca:	3f 90       	pop	r3
 3cc:	2f 90       	pop	r2
 3ce:	1f 90       	pop	r1
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
  asm volatile ("reti");
 3d6:	18 95       	reti

000003d8 <UIKAddTask>:
  
  return 1;

}

uint8_t UIKAddTask(void* task, uint8_t priority, uint8_t* stack, uint16_t stackSize){
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	f9 01       	movw	r30, r18

    
  if (taskNum > maxTaskNumber) {
 3e2:	30 91 c3 01 	lds	r19, 0x01C3
 3e6:	20 91 c2 01 	lds	r18, 0x01C2
 3ea:	23 17       	cp	r18, r19
 3ec:	18 f4       	brcc	.+6      	; 0x3f4 <UIKAddTask+0x1c>
    return taskNum;
 3ee:	80 91 c3 01 	lds	r24, 0x01C3
 3f2:	9e c0       	rjmp	.+316    	; 0x530 <UIKAddTask+0x158>
  }
  
  
  tcb[taskNum].state = eSuspended;
 3f4:	a0 91 1b 02 	lds	r26, 0x021B
 3f8:	b0 91 1c 02 	lds	r27, 0x021C
 3fc:	20 91 c3 01 	lds	r18, 0x01C3
 400:	39 e0       	ldi	r19, 0x09	; 9
 402:	23 9f       	mul	r18, r19
 404:	e0 01       	movw	r28, r0
 406:	11 24       	eor	r1, r1
 408:	ca 0f       	add	r28, r26
 40a:	db 1f       	adc	r29, r27
 40c:	05 e0       	ldi	r16, 0x05	; 5
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	19 83       	std	Y+1, r17	; 0x01
 412:	08 83       	st	Y, r16
  tcb[taskNum].priority = priority;
 414:	20 91 c3 01 	lds	r18, 0x01C3
 418:	23 9f       	mul	r18, r19
 41a:	e0 01       	movw	r28, r0
 41c:	11 24       	eor	r1, r1
 41e:	ca 0f       	add	r28, r26
 420:	db 1f       	adc	r29, r27
 422:	6a 83       	std	Y+2, r22	; 0x02
  tcb[taskNum].delay = 0;
 424:	20 91 c3 01 	lds	r18, 0x01C3
 428:	23 9f       	mul	r18, r19
 42a:	e0 01       	movw	r28, r0
 42c:	11 24       	eor	r1, r1
 42e:	ca 0f       	add	r28, r26
 430:	db 1f       	adc	r29, r27
 432:	1d 82       	std	Y+5, r1	; 0x05
 434:	1e 82       	std	Y+6, r1	; 0x06
 436:	1f 82       	std	Y+7, r1	; 0x07
 438:	18 86       	std	Y+8, r1	; 0x08
  


  // The stack grows down in memory 
  uint8_t* contextPtr = stack + stackSize - 1;
 43a:	31 97       	sbiw	r30, 0x01	; 1
 43c:	e4 0f       	add	r30, r20
 43e:	f5 1f       	adc	r31, r21

 
  //TODO: delete tcb[taskNum].stack_lptr = contextPtr;
  tcb[taskNum].contextPtr = contextPtr - 1;
 440:	20 91 c3 01 	lds	r18, 0x01C3
 444:	23 9f       	mul	r18, r19
 446:	e0 01       	movw	r28, r0
 448:	11 24       	eor	r1, r1
 44a:	ca 0f       	add	r28, r26
 44c:	db 1f       	adc	r29, r27
 44e:	df 01       	movw	r26, r30
 450:	11 97       	sbiw	r26, 0x01	; 1
 452:	bc 83       	std	Y+4, r27	; 0x04
 454:	ab 83       	std	Y+3, r26	; 0x03

  // place a few known bytes on the bottom - useful for debugging 
  *contextPtr = 0x11; 
 456:	41 e1       	ldi	r20, 0x11	; 17
 458:	40 83       	st	Z, r20
  contextPtr--;
  *contextPtr = 0x22; 
 45a:	22 e2       	ldi	r18, 0x22	; 34
 45c:	2c 93       	st	X, r18
  contextPtr--;
 45e:	fd 01       	movw	r30, r26
  *contextPtr = 0x33;
 460:	53 e3       	ldi	r21, 0x33	; 51
 462:	52 93       	st	-Z, r21
  contextPtr--;
  
  // Address of the task
  *contextPtr = ((unsigned int) task) & 0x00ff;
 464:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = (((unsigned int) task) >> 8) & 0x00ff;
 466:	92 93       	st	-Z, r25
  contextPtr--;
  
  //simulate stack after a call to savecontext
  *contextPtr = 0x00;  //r0
 468:	12 92       	st	-Z, r1
  contextPtr--;
  *contextPtr = 0x00;  // necessary for retiTODO: tray 0x08
 46a:	12 92       	st	-Z, r1
  contextPtr--;
  *contextPtr = 0x00;  //r1 wants to always be 0
 46c:	12 92       	st	-Z, r1
  contextPtr--;
  *contextPtr = 0x02;  //r2
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x03;  //r3
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x04;  //r4
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x05;  //r5
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x06;  //r6
 47e:	86 e0       	ldi	r24, 0x06	; 6
 480:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x07;  //r7
 482:	87 e0       	ldi	r24, 0x07	; 7
 484:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x08;  //r8
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x09;  //r9
 48a:	32 93       	st	-Z, r19
  contextPtr--;
  *contextPtr = 0x10;  //r10
 48c:	80 e1       	ldi	r24, 0x10	; 16
 48e:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x11;  //r11
 490:	42 93       	st	-Z, r20
  contextPtr--;
  *contextPtr = 0x12;  //r12
 492:	82 e1       	ldi	r24, 0x12	; 18
 494:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x13;  //r13
 496:	83 e1       	ldi	r24, 0x13	; 19
 498:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x14;  //r14
 49a:	84 e1       	ldi	r24, 0x14	; 20
 49c:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x15;  //r15
 49e:	85 e1       	ldi	r24, 0x15	; 21
 4a0:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x16;  //r16
 4a2:	86 e1       	ldi	r24, 0x16	; 22
 4a4:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x17;  //r17
 4a6:	87 e1       	ldi	r24, 0x17	; 23
 4a8:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x18;  //r18
 4aa:	88 e1       	ldi	r24, 0x18	; 24
 4ac:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x19;  //r19
 4ae:	89 e1       	ldi	r24, 0x19	; 25
 4b0:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x20;  //r20
 4b2:	80 e2       	ldi	r24, 0x20	; 32
 4b4:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x21;  //r21
 4b6:	81 e2       	ldi	r24, 0x21	; 33
 4b8:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x22;  //r22
 4ba:	22 93       	st	-Z, r18
  contextPtr--;
  *contextPtr = 0x23;  //r23
 4bc:	83 e2       	ldi	r24, 0x23	; 35
 4be:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x24;  //r24
 4c0:	84 e2       	ldi	r24, 0x24	; 36
 4c2:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x25;  //r25
 4c4:	85 e2       	ldi	r24, 0x25	; 37
 4c6:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x26;  //r26
 4c8:	86 e2       	ldi	r24, 0x26	; 38
 4ca:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x27;  //r27
 4cc:	87 e2       	ldi	r24, 0x27	; 39
 4ce:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x28;  //r28
 4d0:	88 e2       	ldi	r24, 0x28	; 40
 4d2:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x29;  //r29
 4d4:	89 e2       	ldi	r24, 0x29	; 41
 4d6:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x30;  //r30
 4d8:	80 e3       	ldi	r24, 0x30	; 48
 4da:	82 93       	st	-Z, r24
  contextPtr--;
  *contextPtr = 0x31;  //r31
 4dc:	81 e3       	ldi	r24, 0x31	; 49
 4de:	82 93       	st	-Z, r24
  contextPtr--;
 4e0:	cf 01       	movw	r24, r30
 4e2:	01 97       	sbiw	r24, 0x01	; 1
  
   
  //store the address of the stack 
  *(tcb[taskNum].contextPtr) = (((unsigned int) contextPtr) & 0xff);
 4e4:	40 91 c3 01 	lds	r20, 0x01C3
 4e8:	43 9f       	mul	r20, r19
 4ea:	a0 01       	movw	r20, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	e0 91 1b 02 	lds	r30, 0x021B
 4f2:	f0 91 1c 02 	lds	r31, 0x021C
 4f6:	e4 0f       	add	r30, r20
 4f8:	f5 1f       	adc	r31, r21
 4fa:	03 80       	ldd	r0, Z+3	; 0x03
 4fc:	f4 81       	ldd	r31, Z+4	; 0x04
 4fe:	e0 2d       	mov	r30, r0
 500:	80 83       	st	Z, r24
  *(tcb[taskNum].contextPtr + 1) = ((((unsigned int) contextPtr) >> 8) & 0xff);
 502:	20 91 c3 01 	lds	r18, 0x01C3
 506:	23 9f       	mul	r18, r19
 508:	90 01       	movw	r18, r0
 50a:	11 24       	eor	r1, r1
 50c:	e0 91 1b 02 	lds	r30, 0x021B
 510:	f0 91 1c 02 	lds	r31, 0x021C
 514:	e2 0f       	add	r30, r18
 516:	f3 1f       	adc	r31, r19
 518:	03 80       	ldd	r0, Z+3	; 0x03
 51a:	f4 81       	ldd	r31, Z+4	; 0x04
 51c:	e0 2d       	mov	r30, r0
 51e:	91 83       	std	Z+1, r25	; 0x01

  taskNum++; 
 520:	80 91 c3 01 	lds	r24, 0x01C3
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 93 c3 01 	sts	0x01C3, r24
  
  //return the task id 
  return(taskNum - 1);
 52a:	80 91 c3 01 	lds	r24, 0x01C3
 52e:	81 50       	subi	r24, 0x01	; 1
	
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	08 95       	ret

0000053a <UIKInitialize>:
  restoreContext();
  asm volatile ("reti");

}

uint8_t UIKInitialize(uint16_t ticklen, uint8_t maxTasks){
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	ec 01       	movw	r28, r24
 542:	16 2f       	mov	r17, r22

  int i;
  if(UIKTickLen != 0 || ticklen <= 0){
 544:	80 91 c0 01 	lds	r24, 0x01C0
 548:	90 91 c1 01 	lds	r25, 0x01C1
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	e9 f5       	brne	.+122    	; 0x5ca <UIKInitialize+0x90>
 550:	20 97       	sbiw	r28, 0x00	; 0
 552:	d9 f1       	breq	.+118    	; 0x5ca <UIKInitialize+0x90>
    return 0;
  }
  
  tcb = (TcbElement *) calloc(maxTasks, sizeof(TcbElement));
 554:	86 2f       	mov	r24, r22
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	69 e0       	ldi	r22, 0x09	; 9
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <calloc>
 560:	90 93 1c 02 	sts	0x021C, r25
 564:	80 93 1b 02 	sts	0x021B, r24
  if(tcb == NULL){
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	79 f1       	breq	.+94     	; 0x5ca <UIKInitialize+0x90>
  	return 0;
  }
  
  maxTaskNumber = maxTasks;
 56c:	10 93 c2 01 	sts	0x01C2, r17
  UIKTickLen = ticklen;
 570:	d0 93 c1 01 	sts	0x01C1, r29
 574:	c0 93 c0 01 	sts	0x01C0, r28
  
  // Enable interrupts
  TCCR1B |= (1 << WGM12);
 578:	8e b5       	in	r24, 0x2e	; 46
 57a:	88 60       	ori	r24, 0x08	; 8
 57c:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= (1 << OCIE1A); 
 57e:	89 b7       	in	r24, 0x39	; 57
 580:	80 61       	ori	r24, 0x10	; 16
 582:	89 bf       	out	0x39, r24	; 57
  OCR1A = ticklen;
 584:	db bd       	out	0x2b, r29	; 43
 586:	ca bd       	out	0x2a, r28	; 42
  TCCR1B |= (1 << CS10);
 588:	8e b5       	in	r24, 0x2e	; 46
 58a:	81 60       	ori	r24, 0x01	; 1
 58c:	8e bd       	out	0x2e, r24	; 46
  
  if (UIKAddTask(&UIKIdle, MIN_PRIORITY, idleStack, MIN_STACK_SIZE) > maxTaskNumber)
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	6f ef       	ldi	r22, 0xFF	; 255
 594:	44 ec       	ldi	r20, 0xC4	; 196
 596:	51 e0       	ldi	r21, 0x01	; 1
 598:	25 e5       	ldi	r18, 0x55	; 85
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UIKAddTask>
 5a0:	90 91 c2 01 	lds	r25, 0x01C2
 5a4:	98 17       	cp	r25, r24
 5a6:	88 f0       	brcs	.+34     	; 0x5ca <UIKInitialize+0x90>
 5a8:	cd e1       	ldi	r28, 0x1D	; 29
 5aa:	d2 e0       	ldi	r29, 0x02	; 2
  	return 0;

  for(i = 0; i < MAX_EVENTS; i++) {
	assocEvents[i] = (uint8_t *) calloc(maxTasks, sizeof(uint8_t *));
 5ac:	81 2f       	mov	r24, r17
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	62 e0       	ldi	r22, 0x02	; 2
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <calloc>
 5b8:	88 83       	st	Y, r24
 5ba:	99 83       	std	Y+1, r25	; 0x01
 5bc:	22 96       	adiw	r28, 0x02	; 2
  TCCR1B |= (1 << CS10);
  
  if (UIKAddTask(&UIKIdle, MIN_PRIORITY, idleStack, MIN_STACK_SIZE) > maxTaskNumber)
  	return 0;

  for(i = 0; i < MAX_EVENTS; i++) {
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	cd 32       	cpi	r28, 0x2D	; 45
 5c2:	d8 07       	cpc	r29, r24
 5c4:	99 f7       	brne	.-26     	; 0x5ac <UIKInitialize+0x72>
	assocEvents[i] = (uint8_t *) calloc(maxTasks, sizeof(uint8_t *));
  }
  
  return 1;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <UIKInitialize+0x92>
  TIMSK |= (1 << OCIE1A); 
  OCR1A = ticklen;
  TCCR1B |= (1 << CS10);
  
  if (UIKAddTask(&UIKIdle, MIN_PRIORITY, idleStack, MIN_STACK_SIZE) > maxTaskNumber)
  	return 0;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
	assocEvents[i] = (uint8_t *) calloc(maxTasks, sizeof(uint8_t *));
  }
  
  return 1;

}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	08 95       	ret

000005d4 <UIKRun>:
}


void UIKRun(uint8_t taskid) {
  //the scheduler will run the task if it has the maximum priority
  tcb[taskid].state = eReady;
 5d4:	99 e0       	ldi	r25, 0x09	; 9
 5d6:	89 9f       	mul	r24, r25
 5d8:	c0 01       	movw	r24, r0
 5da:	11 24       	eor	r1, r1
 5dc:	e0 91 1b 02 	lds	r30, 0x021B
 5e0:	f0 91 1c 02 	lds	r31, 0x021C
 5e4:	e8 0f       	add	r30, r24
 5e6:	f9 1f       	adc	r31, r25
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	91 83       	std	Z+1, r25	; 0x01
 5ee:	80 83       	st	Z, r24
}
 5f0:	08 95       	ret

000005f2 <UIKStart>:

void UIKStart() {
  //start with the idle process
  tcb[0].state = eReady;
 5f2:	e0 91 1b 02 	lds	r30, 0x021B
 5f6:	f0 91 1c 02 	lds	r31, 0x021C
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	91 83       	std	Z+1, r25	; 0x01
 600:	80 83       	st	Z, r24
  currentTask = IDLE_ID;
 602:	10 92 2f 02 	sts	0x022F, r1
  currentTCB = tcb[IDLE_ID].contextPtr;
 606:	83 81       	ldd	r24, Z+3	; 0x03
 608:	94 81       	ldd	r25, Z+4	; 0x04
 60a:	90 93 2e 02 	sts	0x022E, r25
 60e:	80 93 2d 02 	sts	0x022D, r24
  restoreContext();
 612:	a0 91 2d 02 	lds	r26, 0x022D
 616:	b0 91 2e 02 	lds	r27, 0x022E
 61a:	cd 91       	ld	r28, X+
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	dd 91       	ld	r29, X+
 620:	de bf       	out	0x3e, r29	; 62
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	bf 90       	pop	r11
 64c:	af 90       	pop	r10
 64e:	9f 90       	pop	r9
 650:	8f 90       	pop	r8
 652:	7f 90       	pop	r7
 654:	6f 90       	pop	r6
 656:	5f 90       	pop	r5
 658:	4f 90       	pop	r4
 65a:	3f 90       	pop	r3
 65c:	2f 90       	pop	r2
 65e:	1f 90       	pop	r1
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
  asm volatile ("reti");
 666:	18 95       	reti
}
 668:	08 95       	ret

0000066a <UIKSchedule>:

//TODO: delete ? void UIKSchedule() __attribute__ ( ( naked ) );
void UIKSchedule() {
  saveContext();
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	0f 92       	push	r0
 672:	1f 92       	push	r1
 674:	11 24       	eor	r1, r1
 676:	2f 92       	push	r2
 678:	3f 92       	push	r3
 67a:	4f 92       	push	r4
 67c:	5f 92       	push	r5
 67e:	6f 92       	push	r6
 680:	7f 92       	push	r7
 682:	8f 92       	push	r8
 684:	9f 92       	push	r9
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
 6b2:	a0 91 2d 02 	lds	r26, 0x022D
 6b6:	b0 91 2e 02 	lds	r27, 0x022E
 6ba:	0d b6       	in	r0, 0x3d	; 61
 6bc:	0d 92       	st	X+, r0
 6be:	0e b6       	in	r0, 0x3e	; 62
 6c0:	0d 92       	st	X+, r0
  UIKDispatcher();
 6c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <UIKDispatcher>
  restoreContext();
 6c6:	a0 91 2d 02 	lds	r26, 0x022D
 6ca:	b0 91 2e 02 	lds	r27, 0x022E
 6ce:	cd 91       	ld	r28, X+
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	dd 91       	ld	r29, X+
 6d4:	de bf       	out	0x3e, r29	; 62
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	bf 91       	pop	r27
 6e0:	af 91       	pop	r26
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	7f 91       	pop	r23
 6e8:	6f 91       	pop	r22
 6ea:	5f 91       	pop	r21
 6ec:	4f 91       	pop	r20
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	ff 90       	pop	r15
 6f8:	ef 90       	pop	r14
 6fa:	df 90       	pop	r13
 6fc:	cf 90       	pop	r12
 6fe:	bf 90       	pop	r11
 700:	af 90       	pop	r10
 702:	9f 90       	pop	r9
 704:	8f 90       	pop	r8
 706:	7f 90       	pop	r7
 708:	6f 90       	pop	r6
 70a:	5f 90       	pop	r5
 70c:	4f 90       	pop	r4
 70e:	3f 90       	pop	r3
 710:	2f 90       	pop	r2
 712:	1f 90       	pop	r1
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
  asm volatile ("reti");
 71a:	18 95       	reti

0000071c <UIKDelay>:
}

void UIKDelay(uint16_t count) {
  tcb[currentTask].state = eDelayBlocked;
 71c:	e0 91 1b 02 	lds	r30, 0x021B
 720:	f0 91 1c 02 	lds	r31, 0x021C
 724:	30 91 2f 02 	lds	r19, 0x022F
 728:	29 e0       	ldi	r18, 0x09	; 9
 72a:	32 9f       	mul	r19, r18
 72c:	90 01       	movw	r18, r0
 72e:	11 24       	eor	r1, r1
 730:	e2 0f       	add	r30, r18
 732:	f3 1f       	adc	r31, r19
 734:	23 e0       	ldi	r18, 0x03	; 3
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	31 83       	std	Z+1, r19	; 0x01
 73a:	20 83       	st	Z, r18
  tcb[currentTask].delay = count;
 73c:	a0 e0       	ldi	r26, 0x00	; 0
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	85 83       	std	Z+5, r24	; 0x05
 742:	96 83       	std	Z+6, r25	; 0x06
 744:	a7 83       	std	Z+7, r26	; 0x07
 746:	b0 87       	std	Z+8, r27	; 0x08
  UIKSchedule(); 
 748:	0e 94 35 03 	call	0x66a	; 0x66a <UIKSchedule>
}
 74c:	08 95       	ret

0000074e <UIKSemCreate>:

UIKSem* UIKSemCreate(uint8_t value){
 74e:	ef 92       	push	r14
 750:	ff 92       	push	r15
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	08 2f       	mov	r16, r24
	UIKSem* sem;
	sem = (UIKSem *)malloc(sizeof(UIKSem));
 75c:	83 e0       	ldi	r24, 0x03	; 3
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 0a 06 	call	0xc14	; 0xc14 <malloc>
 764:	19 2f       	mov	r17, r25
 766:	e8 2e       	mov	r14, r24
 768:	e7 01       	movw	r28, r14
 76a:	7e 01       	movw	r14, r28
 76c:	f9 2e       	mov	r15, r25
 76e:	e7 01       	movw	r28, r14
	sem->value = value;
 770:	08 83       	st	Y, r16
	sem->taskQueue = CreateQueue(maxTaskNumber);
 772:	80 91 c2 01 	lds	r24, 0x01C2
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 37 05 	call	0xa6e	; 0xa6e <CreateQueue>
 77c:	9a 83       	std	Y+2, r25	; 0x02
 77e:	89 83       	std	Y+1, r24	; 0x01
	return sem;
}
 780:	8e 2d       	mov	r24, r14
 782:	91 2f       	mov	r25, r17
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	ff 90       	pop	r15
 78e:	ef 90       	pop	r14
 790:	08 95       	ret

00000792 <UIKSemPend>:

void UIKSemPend(UIKSem* sem) {
 792:	fc 01       	movw	r30, r24
  cli();
 794:	f8 94       	cli
  if(sem->value > 0) {
 796:	80 81       	ld	r24, Z
 798:	88 23       	and	r24, r24
 79a:	21 f0       	breq	.+8      	; 0x7a4 <UIKSemPend+0x12>
  	sem->value--;
 79c:	81 50       	subi	r24, 0x01	; 1
 79e:	80 83       	st	Z, r24
    sei();
 7a0:	78 94       	sei
 7a2:	08 95       	ret
  }
  else{
    Enqueue(currentTask, sem->taskQueue);
 7a4:	61 81       	ldd	r22, Z+1	; 0x01
 7a6:	72 81       	ldd	r23, Z+2	; 0x02
 7a8:	80 91 2f 02 	lds	r24, 0x022F
 7ac:	0e 94 81 05 	call	0xb02	; 0xb02 <Enqueue>
    tcb[currentTask].state = eSemBlocked;
 7b0:	90 91 2f 02 	lds	r25, 0x022F
 7b4:	89 e0       	ldi	r24, 0x09	; 9
 7b6:	98 9f       	mul	r25, r24
 7b8:	c0 01       	movw	r24, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	e0 91 1b 02 	lds	r30, 0x021B
 7c0:	f0 91 1c 02 	lds	r31, 0x021C
 7c4:	e8 0f       	add	r30, r24
 7c6:	f9 1f       	adc	r31, r25
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	91 83       	std	Z+1, r25	; 0x01
 7ce:	80 83       	st	Z, r24
    UIKSchedule();	  
 7d0:	0e 94 35 03 	call	0x66a	; 0x66a <UIKSchedule>
 7d4:	08 95       	ret

000007d6 <UIKSemPost>:
  }
}

void UIKSemPost(UIKSem* sem) {
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	ec 01       	movw	r28, r24
  cli();
 7e0:	f8 94       	cli
  if(!IsEmptyQueue(sem->taskQueue)){
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	9a 81       	ldd	r25, Y+2	; 0x02
 7e6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <IsEmptyQueue>
 7ea:	00 97       	sbiw	r24, 0x00	; 0
 7ec:	c9 f4       	brne	.+50     	; 0x820 <UIKSemPost+0x4a>
  	tcb[Front(sem->taskQueue)].state = eReady;
 7ee:	00 91 1b 02 	lds	r16, 0x021B
 7f2:	10 91 1c 02 	lds	r17, 0x021C
 7f6:	89 81       	ldd	r24, Y+1	; 0x01
 7f8:	9a 81       	ldd	r25, Y+2	; 0x02
 7fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Front>
 7fe:	e9 e0       	ldi	r30, 0x09	; 9
 800:	8e 9f       	mul	r24, r30
 802:	f0 01       	movw	r30, r0
 804:	11 24       	eor	r1, r1
 806:	e0 0f       	add	r30, r16
 808:	f1 1f       	adc	r31, r17
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	91 83       	std	Z+1, r25	; 0x01
 810:	80 83       	st	Z, r24
  	Dequeue(sem->taskQueue);
 812:	89 81       	ldd	r24, Y+1	; 0x01
 814:	9a 81       	ldd	r25, Y+2	; 0x02
 816:	0e 94 b4 05 	call	0xb68	; 0xb68 <Dequeue>
  	UIKSchedule();
 81a:	0e 94 35 03 	call	0x66a	; 0x66a <UIKSchedule>
 81e:	04 c0       	rjmp	.+8      	; 0x828 <UIKSemPost+0x52>
  }
  else{
  	sem->value++;
 820:	88 81       	ld	r24, Y
 822:	8f 5f       	subi	r24, 0xFF	; 255
 824:	88 83       	st	Y, r24
    sei(); 
 826:	78 94       	sei
  }
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <UIKSemValue>:

uint8_t UIKSemValue(UIKSem* sem) {
  return sem->value;
}
 832:	fc 01       	movw	r30, r24
 834:	80 81       	ld	r24, Z
 836:	08 95       	ret

00000838 <UIKAssocEvent>:

void UIKAssocEvent(uint8_t Event) {

  if(Event == 0)
 838:	88 23       	and	r24, r24
 83a:	19 f1       	breq	.+70     	; 0x882 <__stack+0x23>
  	return;

  cli();
 83c:	f8 94       	cli
 83e:	ed e1       	ldi	r30, 0x1D	; 29
 840:	f2 e0       	ldi	r31, 0x02	; 2
  int i = 0;
  while(Event != 0){
  	if((Event & 0x01) != 0){
  	        assocEvents[i][currentTask] = 1;
 842:	91 e0       	ldi	r25, 0x01	; 1
  	return;

  cli();
  int i = 0;
  while(Event != 0){
  	if((Event & 0x01) != 0){
 844:	80 ff       	sbrs	r24, 0
 846:	07 c0       	rjmp	.+14     	; 0x856 <UIKAssocEvent+0x1e>
  	        assocEvents[i][currentTask] = 1;
 848:	20 91 2f 02 	lds	r18, 0x022F
 84c:	a0 81       	ld	r26, Z
 84e:	b1 81       	ldd	r27, Z+1	; 0x01
 850:	a2 0f       	add	r26, r18
 852:	b1 1d       	adc	r27, r1
 854:	9c 93       	st	X, r25
  		
  	}
  	Event = Event >> 1;
 856:	86 95       	lsr	r24
 858:	32 96       	adiw	r30, 0x02	; 2
  if(Event == 0)
  	return;

  cli();
  int i = 0;
  while(Event != 0){
 85a:	88 23       	and	r24, r24
 85c:	99 f7       	brne	.-26     	; 0x844 <UIKAssocEvent+0xc>
  	}
  	Event = Event >> 1;
  	i++;
  }
 
  tcb[currentTask].state = eEventBlocked;
 85e:	90 91 2f 02 	lds	r25, 0x022F
 862:	89 e0       	ldi	r24, 0x09	; 9
 864:	98 9f       	mul	r25, r24
 866:	c0 01       	movw	r24, r0
 868:	11 24       	eor	r1, r1
 86a:	e0 91 1b 02 	lds	r30, 0x021B
 86e:	f0 91 1c 02 	lds	r31, 0x021C
 872:	e8 0f       	add	r30, r24
 874:	f9 1f       	adc	r31, r25
 876:	84 e0       	ldi	r24, 0x04	; 4
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	91 83       	std	Z+1, r25	; 0x01
 87c:	80 83       	st	Z, r24
  UIKSchedule();
 87e:	0e 94 35 03 	call	0x66a	; 0x66a <UIKSchedule>
 882:	08 95       	ret

00000884 <UIKDisassocEvent>:
}


void UIKDisassocEvent(uint8_t Event) {
  cli();
 884:	f8 94       	cli
 886:	ed e1       	ldi	r30, 0x1D	; 29
 888:	f2 e0       	ldi	r31, 0x02	; 2
  int i = 0;
  while(Event != 0){
 88a:	0b c0       	rjmp	.+22     	; 0x8a2 <UIKDisassocEvent+0x1e>
  	if((Event & 0x01) != 0){
 88c:	80 ff       	sbrs	r24, 0
 88e:	07 c0       	rjmp	.+14     	; 0x89e <UIKDisassocEvent+0x1a>
  	        assocEvents[i][currentTask] = 0;
 890:	90 91 2f 02 	lds	r25, 0x022F
 894:	a0 81       	ld	r26, Z
 896:	b1 81       	ldd	r27, Z+1	; 0x01
 898:	a9 0f       	add	r26, r25
 89a:	b1 1d       	adc	r27, r1
 89c:	1c 92       	st	X, r1
  	}
  	Event = Event >> 1;
 89e:	86 95       	lsr	r24
 8a0:	32 96       	adiw	r30, 0x02	; 2


void UIKDisassocEvent(uint8_t Event) {
  cli();
  int i = 0;
  while(Event != 0){
 8a2:	88 23       	and	r24, r24
 8a4:	99 f7       	brne	.-26     	; 0x88c <UIKDisassocEvent+0x8>
  	        assocEvents[i][currentTask] = 0;
  	}
  	Event = Event >> 1;
  	i++;
  }
  sei();
 8a6:	78 94       	sei
}
 8a8:	08 95       	ret

000008aa <UIKRaiseEvent>:

void UIKRaiseEvent(uint8_t Event){
 8aa:	0f 93       	push	r16
 8ac:	1f 93       	push	r17
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
	
  cli();
 8b2:	f8 94       	cli
  int i = 0;
  int j = 0;
  while(Event != 0){
  	if((Event & 0x01) != 0){
  		for(j = 0; j < maxTaskNumber; j++){
  			if(assocEvents[i][j] == 1 && tcb[j].state == eEventBlocked)
 8b4:	00 91 1b 02 	lds	r16, 0x021B
 8b8:	10 91 1c 02 	lds	r17, 0x021C
 8bc:	ad e1       	ldi	r26, 0x1D	; 29
 8be:	b2 e0       	ldi	r27, 0x02	; 2
  			 tcb[j].state= eReady;
 8c0:	41 e0       	ldi	r20, 0x01	; 1
 8c2:	50 e0       	ldi	r21, 0x00	; 0
void UIKRaiseEvent(uint8_t Event){
	
  cli();
  int i = 0;
  int j = 0;
  while(Event != 0){
 8c4:	21 c0       	rjmp	.+66     	; 0x908 <UIKRaiseEvent+0x5e>
  	if((Event & 0x01) != 0){
 8c6:	80 ff       	sbrs	r24, 0
 8c8:	1d c0       	rjmp	.+58     	; 0x904 <UIKRaiseEvent+0x5a>
 8ca:	e0 2f       	mov	r30, r16
 8cc:	f1 2f       	mov	r31, r17
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	12 c0       	rjmp	.+36     	; 0x8f8 <UIKRaiseEvent+0x4e>
  		for(j = 0; j < maxTaskNumber; j++){
  			if(assocEvents[i][j] == 1 && tcb[j].state == eEventBlocked)
 8d4:	cd 91       	ld	r28, X+
 8d6:	dc 91       	ld	r29, X
 8d8:	11 97       	sbiw	r26, 0x01	; 1
 8da:	c2 0f       	add	r28, r18
 8dc:	d3 1f       	adc	r29, r19
 8de:	98 81       	ld	r25, Y
 8e0:	91 30       	cpi	r25, 0x01	; 1
 8e2:	39 f4       	brne	.+14     	; 0x8f2 <UIKRaiseEvent+0x48>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	64 30       	cpi	r22, 0x04	; 4
 8ea:	71 05       	cpc	r23, r1
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <UIKRaiseEvent+0x48>
  			 tcb[j].state= eReady;
 8ee:	51 83       	std	Z+1, r21	; 0x01
 8f0:	40 83       	st	Z, r20
  cli();
  int i = 0;
  int j = 0;
  while(Event != 0){
  	if((Event & 0x01) != 0){
  		for(j = 0; j < maxTaskNumber; j++){
 8f2:	2f 5f       	subi	r18, 0xFF	; 255
 8f4:	3f 4f       	sbci	r19, 0xFF	; 255
 8f6:	39 96       	adiw	r30, 0x09	; 9
 8f8:	60 91 c2 01 	lds	r22, 0x01C2
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	26 17       	cp	r18, r22
 900:	37 07       	cpc	r19, r23
 902:	44 f3       	brlt	.-48     	; 0x8d4 <UIKRaiseEvent+0x2a>
  			if(assocEvents[i][j] == 1 && tcb[j].state == eEventBlocked)
  			 tcb[j].state= eReady;
  		}
  	}
  	Event = Event >> 1;
 904:	86 95       	lsr	r24
 906:	12 96       	adiw	r26, 0x02	; 2
void UIKRaiseEvent(uint8_t Event){
	
  cli();
  int i = 0;
  int j = 0;
  while(Event != 0){
 908:	88 23       	and	r24, r24
 90a:	e9 f6       	brne	.-70     	; 0x8c6 <UIKRaiseEvent+0x1c>
  		}
  	}
  	Event = Event >> 1;
  	i++;
  }
  UIKSchedule();
 90c:	0e 94 35 03 	call	0x66a	; 0x66a <UIKSchedule>
}
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	08 95       	ret

0000091a <IsEmpty>:

}

/* Return "true" if L is empty */
int IsEmpty(List L) {
  return L->Next == NULL;
 91a:	21 e0       	ldi	r18, 0x01	; 1
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	fc 01       	movw	r30, r24
 920:	81 81       	ldd	r24, Z+1	; 0x01
 922:	92 81       	ldd	r25, Z+2	; 0x02
 924:	00 97       	sbiw	r24, 0x00	; 0
 926:	11 f0       	breq	.+4      	; 0x92c <IsEmpty+0x12>
 928:	20 e0       	ldi	r18, 0x00	; 0
 92a:	30 e0       	ldi	r19, 0x00	; 0
}
 92c:	c9 01       	movw	r24, r18
 92e:	08 95       	ret

00000930 <IsLast>:
/*
 * Return "true" if P is the last position in list L.
 * (Parameter L is unused in this implementation)
 */
int IsLast(Position P, List L) {
  return P->Next == NULL;
 930:	21 e0       	ldi	r18, 0x01	; 1
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	fc 01       	movw	r30, r24
 936:	81 81       	ldd	r24, Z+1	; 0x01
 938:	92 81       	ldd	r25, Z+2	; 0x02
 93a:	00 97       	sbiw	r24, 0x00	; 0
 93c:	11 f0       	breq	.+4      	; 0x942 <IsLast+0x12>
 93e:	20 e0       	ldi	r18, 0x00	; 0
 940:	30 e0       	ldi	r19, 0x00	; 0
}
 942:	c9 01       	movw	r24, r18
 944:	08 95       	ret

00000946 <Find>:
/* Return Position of X in L; NULL if not found */
Position Find(ElementType X, List L) {

  Position P;

  P = L->Next;
 946:	db 01       	movw	r26, r22
 948:	11 96       	adiw	r26, 0x01	; 1
 94a:	ed 91       	ld	r30, X+
 94c:	fc 91       	ld	r31, X
 94e:	12 97       	sbiw	r26, 0x02	; 2
  while(P != NULL && P->Element != X) {
 950:	03 c0       	rjmp	.+6      	; 0x958 <Find+0x12>
    P = P->Next;
 952:	01 80       	ldd	r0, Z+1	; 0x01
 954:	f2 81       	ldd	r31, Z+2	; 0x02
 956:	e0 2d       	mov	r30, r0
Position Find(ElementType X, List L) {

  Position P;

  P = L->Next;
  while(P != NULL && P->Element != X) {
 958:	30 97       	sbiw	r30, 0x00	; 0
 95a:	19 f0       	breq	.+6      	; 0x962 <Find+0x1c>
 95c:	90 81       	ld	r25, Z
 95e:	98 17       	cp	r25, r24
 960:	c1 f7       	brne	.-16     	; 0x952 <Find+0xc>
    P = P->Next;
  }
  return P;
}
 962:	cf 01       	movw	r24, r30
 964:	08 95       	ret

00000966 <FindPrevious>:
 */
Position FindPrevious(ElementType X, List L) {

  Position P;

  P = L;
 966:	e6 2f       	mov	r30, r22
 968:	f7 2f       	mov	r31, r23
  while (P->Next != NULL && P->Next->Element != X) {
 96a:	01 c0       	rjmp	.+2      	; 0x96e <FindPrevious+0x8>
 96c:	fd 01       	movw	r30, r26
 96e:	a1 81       	ldd	r26, Z+1	; 0x01
 970:	b2 81       	ldd	r27, Z+2	; 0x02
 972:	10 97       	sbiw	r26, 0x00	; 0
 974:	19 f0       	breq	.+6      	; 0x97c <FindPrevious+0x16>
 976:	9c 91       	ld	r25, X
 978:	98 17       	cp	r25, r24
 97a:	c1 f7       	brne	.-16     	; 0x96c <FindPrevious+0x6>
    P = P->Next;
  }

 return P;

}
 97c:	cf 01       	movw	r24, r30
 97e:	08 95       	ret

00000980 <Delete>:
 */
void Delete(ElementType X, List L) {

  Position P, TmpCell;

  P = FindPrevious(X, L);
 980:	0e 94 b3 04 	call	0x966	; 0x966 <FindPrevious>
 984:	fc 01       	movw	r30, r24
/*
 * Return "true" if P is the last position in list L.
 * (Parameter L is unused in this implementation)
 */
int IsLast(Position P, List L) {
  return P->Next == NULL;
 986:	81 81       	ldd	r24, Z+1	; 0x01
 988:	92 81       	ldd	r25, Z+2	; 0x02
  Position P, TmpCell;

  P = FindPrevious(X, L);

  /* Assumption use of a header node */
  if (!IsLast(P, L)) {
 98a:	00 97       	sbiw	r24, 0x00	; 0
 98c:	49 f0       	breq	.+18     	; 0x9a0 <Delete+0x20>

    /* Position (X) is found; delete it */
    TmpCell = P->Next;

    /* Bypass deleted cell */
    P->Next = TmpCell->Next;
 98e:	dc 01       	movw	r26, r24
 990:	11 96       	adiw	r26, 0x01	; 1
 992:	2d 91       	ld	r18, X+
 994:	3c 91       	ld	r19, X
 996:	12 97       	sbiw	r26, 0x02	; 2
 998:	32 83       	std	Z+2, r19	; 0x02
 99a:	21 83       	std	Z+1, r18	; 0x01
    free(TmpCell);
 99c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <free>
 9a0:	08 95       	ret

000009a2 <Insert>:
/*
 * Insert (after legal position P)
 * This implementation assumes the use of
 * a header node.
 */
void Insert( ElementType X, List L, Position P ) {
 9a2:	1f 93       	push	r17
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	18 2f       	mov	r17, r24
 9aa:	ea 01       	movw	r28, r20

  Position TmpCell;

  TmpCell = malloc( sizeof( struct Node ) );
 9ac:	83 e0       	ldi	r24, 0x03	; 3
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 0a 06 	call	0xc14	; 0xc14 <malloc>
 9b4:	fc 01       	movw	r30, r24
  if(TmpCell == NULL) PORTB= 0x01;
 9b6:	00 97       	sbiw	r24, 0x00	; 0
 9b8:	11 f4       	brne	.+4      	; 0x9be <Insert+0x1c>
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	88 bb       	out	0x18, r24	; 24

  TmpCell->Element = X;
 9be:	10 83       	st	Z, r17
  TmpCell->Next = P->Next;
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	9a 81       	ldd	r25, Y+2	; 0x02
 9c4:	92 83       	std	Z+2, r25	; 0x02
 9c6:	81 83       	std	Z+1, r24	; 0x01
  P->Next = TmpCell;
 9c8:	fa 83       	std	Y+2, r31	; 0x02
 9ca:	e9 83       	std	Y+1, r30	; 0x01
  

}
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	1f 91       	pop	r17
 9d2:	08 95       	ret

000009d4 <DeleteList>:


/* Correct DeleteList algorithm */
void DeleteList(List L) {
 9d4:	0f 93       	push	r16
 9d6:	1f 93       	push	r17
 9d8:	dc 01       	movw	r26, r24

  Position P, Tmp;

  /* Header assumed */
  P = L->Next;
 9da:	11 96       	adiw	r26, 0x01	; 1
 9dc:	ed 91       	ld	r30, X+
 9de:	fc 91       	ld	r31, X
 9e0:	12 97       	sbiw	r26, 0x02	; 2
  L->Next = NULL;
 9e2:	12 96       	adiw	r26, 0x02	; 2
 9e4:	1c 92       	st	X, r1
 9e6:	1e 92       	st	-X, r1
 9e8:	11 97       	sbiw	r26, 0x01	; 1
  while(P != NULL) {
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <DeleteList+0x26>
    Tmp = P->Next;
 9ec:	01 81       	ldd	r16, Z+1	; 0x01
 9ee:	12 81       	ldd	r17, Z+2	; 0x02
    free(P);
 9f0:	cf 01       	movw	r24, r30
 9f2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <free>
    P = Tmp;
 9f6:	e0 2f       	mov	r30, r16
 9f8:	f1 2f       	mov	r31, r17
  Position P, Tmp;

  /* Header assumed */
  P = L->Next;
  L->Next = NULL;
  while(P != NULL) {
 9fa:	30 97       	sbiw	r30, 0x00	; 0
 9fc:	b9 f7       	brne	.-18     	; 0x9ec <DeleteList+0x18>
    Tmp = P->Next;
    free(P);
    P = Tmp;
  }

}
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	08 95       	ret

00000a04 <MakeEmpty>:
  Position    Next;
};

List MakeEmpty(List L) {

  if (L != NULL) {
 a04:	00 97       	sbiw	r24, 0x00	; 0
 a06:	11 f0       	breq	.+4      	; 0xa0c <MakeEmpty+0x8>
    DeleteList(L);
 a08:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DeleteList>
  }

  L = malloc( sizeof(struct Node) );
 a0c:	83 e0       	ldi	r24, 0x03	; 3
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 0a 06 	call	0xc14	; 0xc14 <malloc>
 a14:	fc 01       	movw	r30, r24

  if (L == NULL) {
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	19 f0       	breq	.+6      	; 0xa20 <MakeEmpty+0x1c>
    return NULL;
  }

  L->Next = NULL;
 a1a:	12 82       	std	Z+2, r1	; 0x02
 a1c:	11 82       	std	Z+1, r1	; 0x01
  L->Element = 0;
 a1e:	10 82       	st	Z, r1
  return L;

}
 a20:	cf 01       	movw	r24, r30
 a22:	08 95       	ret

00000a24 <Header>:

}

Position Header(List L) {
  return L;
}
 a24:	08 95       	ret

00000a26 <First>:

Position First(List L) {
 a26:	fc 01       	movw	r30, r24
  return L->Next;
}
 a28:	81 81       	ldd	r24, Z+1	; 0x01
 a2a:	92 81       	ldd	r25, Z+2	; 0x02
 a2c:	08 95       	ret

00000a2e <Advance>:

Position Advance(Position P) {
 a2e:	fc 01       	movw	r30, r24
  return P->Next;
}
 a30:	81 81       	ldd	r24, Z+1	; 0x01
 a32:	92 81       	ldd	r25, Z+2	; 0x02
 a34:	08 95       	ret

00000a36 <Retrieve>:

ElementType Retrieve(Position P) {
  return P->Element;
}
 a36:	fc 01       	movw	r30, r24
 a38:	80 81       	ld	r24, Z
 a3a:	08 95       	ret

00000a3c <IsEmptyQueue>:
  int Size;
  ElementQueueType *Array;
};

int IsEmptyQueue(Queue Q) {
  return Q->Size == 0;
 a3c:	21 e0       	ldi	r18, 0x01	; 1
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	fc 01       	movw	r30, r24
 a42:	86 81       	ldd	r24, Z+6	; 0x06
 a44:	97 81       	ldd	r25, Z+7	; 0x07
 a46:	00 97       	sbiw	r24, 0x00	; 0
 a48:	11 f0       	breq	.+4      	; 0xa4e <IsEmptyQueue+0x12>
 a4a:	20 e0       	ldi	r18, 0x00	; 0
 a4c:	30 e0       	ldi	r19, 0x00	; 0
}
 a4e:	c9 01       	movw	r24, r18
 a50:	08 95       	ret

00000a52 <IsFull>:

int IsFull(Queue Q) {
 a52:	fc 01       	movw	r30, r24
  return Q->Size == Q->Capacity;
 a54:	21 e0       	ldi	r18, 0x01	; 1
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	46 81       	ldd	r20, Z+6	; 0x06
 a5a:	57 81       	ldd	r21, Z+7	; 0x07
 a5c:	80 81       	ld	r24, Z
 a5e:	91 81       	ldd	r25, Z+1	; 0x01
 a60:	48 17       	cp	r20, r24
 a62:	59 07       	cpc	r21, r25
 a64:	11 f0       	breq	.+4      	; 0xa6a <IsFull+0x18>
 a66:	20 e0       	ldi	r18, 0x00	; 0
 a68:	30 e0       	ldi	r19, 0x00	; 0
}
 a6a:	c9 01       	movw	r24, r18
 a6c:	08 95       	ret

00000a6e <CreateQueue>:

Queue CreateQueue(int MaxElements) {
 a6e:	ef 92       	push	r14
 a70:	ff 92       	push	r15
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	8c 01       	movw	r16, r24
  Queue Q;


  Q = malloc (sizeof(struct QueueRecord));
 a7c:	8a e0       	ldi	r24, 0x0A	; 10
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 0a 06 	call	0xc14	; 0xc14 <malloc>
 a84:	e8 2e       	mov	r14, r24
 a86:	e7 01       	movw	r28, r14
 a88:	7e 01       	movw	r14, r28
 a8a:	f9 2e       	mov	r15, r25
 a8c:	e7 01       	movw	r28, r14
  if (Q == NULL) {
 a8e:	20 97       	sbiw	r28, 0x00	; 0
 a90:	b9 f0       	breq	.+46     	; 0xac0 <CreateQueue+0x52>
    return NULL;
  }

  Q->Array = malloc( sizeof(ElementQueueType) * MaxElements );
 a92:	c8 01       	movw	r24, r16
 a94:	0e 94 0a 06 	call	0xc14	; 0xc14 <malloc>
 a98:	99 87       	std	Y+9, r25	; 0x09
 a9a:	88 87       	std	Y+8, r24	; 0x08
  if (Q->Array == NULL) {
 a9c:	00 97       	sbiw	r24, 0x00	; 0
 a9e:	31 f4       	brne	.+12     	; 0xaac <CreateQueue+0x3e>
    free(Q);
 aa0:	c7 01       	movw	r24, r14
 aa2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <free>
    return NULL;
 aa6:	c0 e0       	ldi	r28, 0x00	; 0
 aa8:	d0 e0       	ldi	r29, 0x00	; 0
 aaa:	0a c0       	rjmp	.+20     	; 0xac0 <CreateQueue+0x52>
  }

  Q->Capacity = MaxElements;
 aac:	19 83       	std	Y+1, r17	; 0x01
 aae:	08 83       	st	Y, r16
  return Q;
}

void MakeEmptyQueue(Queue Q) {

  Q->Size = 0;
 ab0:	1f 82       	std	Y+7, r1	; 0x07
 ab2:	1e 82       	std	Y+6, r1	; 0x06
  Q->Front = 1;
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	9b 83       	std	Y+3, r25	; 0x03
 aba:	8a 83       	std	Y+2, r24	; 0x02
  Q->Rear = 0;
 abc:	1d 82       	std	Y+5, r1	; 0x05
 abe:	1c 82       	std	Y+4, r1	; 0x04

  Q->Capacity = MaxElements;
  MakeEmptyQueue(Q);

  return Q;
}
 ac0:	ce 01       	movw	r24, r28
 ac2:	df 91       	pop	r29
 ac4:	cf 91       	pop	r28
 ac6:	1f 91       	pop	r17
 ac8:	0f 91       	pop	r16
 aca:	ff 90       	pop	r15
 acc:	ef 90       	pop	r14
 ace:	08 95       	ret

00000ad0 <MakeEmptyQueue>:

void MakeEmptyQueue(Queue Q) {
 ad0:	fc 01       	movw	r30, r24

  Q->Size = 0;
 ad2:	17 82       	std	Z+7, r1	; 0x07
 ad4:	16 82       	std	Z+6, r1	; 0x06
  Q->Front = 1;
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	93 83       	std	Z+3, r25	; 0x03
 adc:	82 83       	std	Z+2, r24	; 0x02
  Q->Rear = 0;
 ade:	15 82       	std	Z+5, r1	; 0x05
 ae0:	14 82       	std	Z+4, r1	; 0x04

}
 ae2:	08 95       	ret

00000ae4 <DisposeQueue>:

void DisposeQueue(Queue Q) {
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	ec 01       	movw	r28, r24
  if (Q != NULL) {
 aea:	00 97       	sbiw	r24, 0x00	; 0
 aec:	39 f0       	breq	.+14     	; 0xafc <DisposeQueue+0x18>
    free(Q->Array);
 aee:	88 85       	ldd	r24, Y+8	; 0x08
 af0:	99 85       	ldd	r25, Y+9	; 0x09
 af2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <free>
    free(Q);
 af6:	ce 01       	movw	r24, r28
 af8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <free>
  }
}
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	08 95       	ret

00000b02 <Enqueue>:
    Value = 0;
  }
  return Value;
}

void Enqueue(ElementQueueType X, Queue Q) {
 b02:	fb 01       	movw	r30, r22
int IsEmptyQueue(Queue Q) {
  return Q->Size == 0;
}

int IsFull(Queue Q) {
  return Q->Size == Q->Capacity;
 b04:	26 81       	ldd	r18, Z+6	; 0x06
 b06:	37 81       	ldd	r19, Z+7	; 0x07
 b08:	40 81       	ld	r20, Z
 b0a:	51 81       	ldd	r21, Z+1	; 0x01
  return Value;
}

void Enqueue(ElementQueueType X, Queue Q) {

  if (IsFull(Q)) {
 b0c:	24 17       	cp	r18, r20
 b0e:	35 07       	cpc	r19, r21
 b10:	a9 f0       	breq	.+42     	; 0xb3c <Enqueue+0x3a>
    return;
  } else {
    Q->Size++;
 b12:	2f 5f       	subi	r18, 0xFF	; 255
 b14:	3f 4f       	sbci	r19, 0xFF	; 255
 b16:	37 83       	std	Z+7, r19	; 0x07
 b18:	26 83       	std	Z+6, r18	; 0x06
    free(Q);
  }
}

static int Succ(int Value, Queue Q) {
  if (++Value == Q->Capacity) {
 b1a:	24 81       	ldd	r18, Z+4	; 0x04
 b1c:	35 81       	ldd	r19, Z+5	; 0x05
 b1e:	2f 5f       	subi	r18, 0xFF	; 255
 b20:	3f 4f       	sbci	r19, 0xFF	; 255
 b22:	24 17       	cp	r18, r20
 b24:	35 07       	cpc	r19, r21
 b26:	11 f4       	brne	.+4      	; 0xb2c <Enqueue+0x2a>
    Value = 0;
 b28:	20 e0       	ldi	r18, 0x00	; 0
 b2a:	30 e0       	ldi	r19, 0x00	; 0

  if (IsFull(Q)) {
    return;
  } else {
    Q->Size++;
    Q->Rear = Succ(Q->Rear, Q);
 b2c:	35 83       	std	Z+5, r19	; 0x05
 b2e:	24 83       	std	Z+4, r18	; 0x04
    Q->Array[Q->Rear] = X;
 b30:	00 84       	ldd	r0, Z+8	; 0x08
 b32:	f1 85       	ldd	r31, Z+9	; 0x09
 b34:	e0 2d       	mov	r30, r0
 b36:	e2 0f       	add	r30, r18
 b38:	f3 1f       	adc	r31, r19
 b3a:	80 83       	st	Z, r24
 b3c:	08 95       	ret

00000b3e <Front>:
  }

}

ElementQueueType Front(Queue Q) {
 b3e:	dc 01       	movw	r26, r24

  if (!IsEmptyQueue(Q)) {
 b40:	16 96       	adiw	r26, 0x06	; 6
 b42:	8d 91       	ld	r24, X+
 b44:	9c 91       	ld	r25, X
 b46:	17 97       	sbiw	r26, 0x07	; 7
 b48:	00 97       	sbiw	r24, 0x00	; 0
 b4a:	61 f0       	breq	.+24     	; 0xb64 <Front+0x26>
    return Q->Array[Q->Front];
 b4c:	18 96       	adiw	r26, 0x08	; 8
 b4e:	ed 91       	ld	r30, X+
 b50:	fc 91       	ld	r31, X
 b52:	19 97       	sbiw	r26, 0x09	; 9
 b54:	12 96       	adiw	r26, 0x02	; 2
 b56:	8d 91       	ld	r24, X+
 b58:	9c 91       	ld	r25, X
 b5a:	13 97       	sbiw	r26, 0x03	; 3
 b5c:	e8 0f       	add	r30, r24
 b5e:	f9 1f       	adc	r31, r25
 b60:	80 81       	ld	r24, Z
 b62:	08 95       	ret
  }

  /* Return value to avoid warnings from the compiler */
  return 0;
 b64:	80 e0       	ldi	r24, 0x00	; 0

}
 b66:	08 95       	ret

00000b68 <Dequeue>:

void Dequeue(Queue Q) {
 b68:	fc 01       	movw	r30, r24
  int Size;
  ElementQueueType *Array;
};

int IsEmptyQueue(Queue Q) {
  return Q->Size == 0;
 b6a:	86 81       	ldd	r24, Z+6	; 0x06
 b6c:	97 81       	ldd	r25, Z+7	; 0x07

}

void Dequeue(Queue Q) {

  if (IsEmptyQueue(Q)) {
 b6e:	00 97       	sbiw	r24, 0x00	; 0
 b70:	79 f0       	breq	.+30     	; 0xb90 <Dequeue+0x28>
    return;
  } else {
    Q->Size--;
 b72:	01 97       	sbiw	r24, 0x01	; 1
 b74:	97 83       	std	Z+7, r25	; 0x07
 b76:	86 83       	std	Z+6, r24	; 0x06
    free(Q);
  }
}

static int Succ(int Value, Queue Q) {
  if (++Value == Q->Capacity) {
 b78:	82 81       	ldd	r24, Z+2	; 0x02
 b7a:	93 81       	ldd	r25, Z+3	; 0x03
 b7c:	01 96       	adiw	r24, 0x01	; 1
 b7e:	20 81       	ld	r18, Z
 b80:	31 81       	ldd	r19, Z+1	; 0x01
 b82:	82 17       	cp	r24, r18
 b84:	93 07       	cpc	r25, r19
 b86:	11 f4       	brne	.+4      	; 0xb8c <Dequeue+0x24>
    Value = 0;
 b88:	80 e0       	ldi	r24, 0x00	; 0
 b8a:	90 e0       	ldi	r25, 0x00	; 0

  if (IsEmptyQueue(Q)) {
    return;
  } else {
    Q->Size--;
    Q->Front = Succ(Q->Front, Q);
 b8c:	93 83       	std	Z+3, r25	; 0x03
 b8e:	82 83       	std	Z+2, r24	; 0x02
 b90:	08 95       	ret

00000b92 <FrontAndDequeue>:
  }

}

ElementQueueType FrontAndDequeue(Queue Q) {
 b92:	fc 01       	movw	r30, r24
  int Size;
  ElementQueueType *Array;
};

int IsEmptyQueue(Queue Q) {
  return Q->Size == 0;
 b94:	86 81       	ldd	r24, Z+6	; 0x06
 b96:	97 81       	ldd	r25, Z+7	; 0x07

ElementQueueType FrontAndDequeue(Queue Q) {

  ElementQueueType X = 0;

  if (IsEmptyQueue(Q)) {
 b98:	00 97       	sbiw	r24, 0x00	; 0
 b9a:	b1 f0       	breq	.+44     	; 0xbc8 <FrontAndDequeue+0x36>
    return X;
  } else {
    Q->Size--;
 b9c:	01 97       	sbiw	r24, 0x01	; 1
 b9e:	97 83       	std	Z+7, r25	; 0x07
 ba0:	86 83       	std	Z+6, r24	; 0x06
    X = Q->Array[Q->Front];
 ba2:	22 81       	ldd	r18, Z+2	; 0x02
 ba4:	33 81       	ldd	r19, Z+3	; 0x03
 ba6:	a0 85       	ldd	r26, Z+8	; 0x08
 ba8:	b1 85       	ldd	r27, Z+9	; 0x09
 baa:	a2 0f       	add	r26, r18
 bac:	b3 1f       	adc	r27, r19
 bae:	8c 91       	ld	r24, X
    free(Q);
  }
}

static int Succ(int Value, Queue Q) {
  if (++Value == Q->Capacity) {
 bb0:	2f 5f       	subi	r18, 0xFF	; 255
 bb2:	3f 4f       	sbci	r19, 0xFF	; 255
 bb4:	40 81       	ld	r20, Z
 bb6:	51 81       	ldd	r21, Z+1	; 0x01
 bb8:	24 17       	cp	r18, r20
 bba:	35 07       	cpc	r19, r21
 bbc:	11 f4       	brne	.+4      	; 0xbc2 <FrontAndDequeue+0x30>
    Value = 0;
 bbe:	20 e0       	ldi	r18, 0x00	; 0
 bc0:	30 e0       	ldi	r19, 0x00	; 0
  if (IsEmptyQueue(Q)) {
    return X;
  } else {
    Q->Size--;
    X = Q->Array[Q->Front];
    Q->Front = Succ(Q->Front, Q);
 bc2:	33 83       	std	Z+3, r19	; 0x03
 bc4:	22 83       	std	Z+2, r18	; 0x02
  }
  return X;
 bc6:	08 95       	ret
ElementQueueType FrontAndDequeue(Queue Q) {

  ElementQueueType X = 0;

  if (IsEmptyQueue(Q)) {
    return X;
 bc8:	80 e0       	ldi	r24, 0x00	; 0
    X = Q->Array[Q->Front];
    Q->Front = Succ(Q->Front, Q);
  }
  return X;

}
 bca:	08 95       	ret

00000bcc <calloc>:
 bcc:	ef 92       	push	r14
 bce:	ff 92       	push	r15
 bd0:	0f 93       	push	r16
 bd2:	1f 93       	push	r17
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
 bd8:	68 9f       	mul	r22, r24
 bda:	80 01       	movw	r16, r0
 bdc:	69 9f       	mul	r22, r25
 bde:	10 0d       	add	r17, r0
 be0:	78 9f       	mul	r23, r24
 be2:	10 0d       	add	r17, r0
 be4:	11 24       	eor	r1, r1
 be6:	c8 01       	movw	r24, r16
 be8:	0e 94 0a 06 	call	0xc14	; 0xc14 <malloc>
 bec:	e8 2e       	mov	r14, r24
 bee:	e7 01       	movw	r28, r14
 bf0:	7e 01       	movw	r14, r28
 bf2:	f9 2e       	mov	r15, r25
 bf4:	e7 01       	movw	r28, r14
 bf6:	20 97       	sbiw	r28, 0x00	; 0
 bf8:	31 f0       	breq	.+12     	; 0xc06 <calloc+0x3a>
 bfa:	8e 2d       	mov	r24, r14
 bfc:	60 e0       	ldi	r22, 0x00	; 0
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	a8 01       	movw	r20, r16
 c02:	0e 94 3f 07 	call	0xe7e	; 0xe7e <memset>
 c06:	7e 01       	movw	r14, r28
 c08:	ce 01       	movw	r24, r28
 c0a:	cd b7       	in	r28, 0x3d	; 61
 c0c:	de b7       	in	r29, 0x3e	; 62
 c0e:	e6 e0       	ldi	r30, 0x06	; 6
 c10:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__epilogue_restores__+0x18>

00000c14 <malloc>:
 c14:	cf 93       	push	r28
 c16:	df 93       	push	r29
 c18:	82 30       	cpi	r24, 0x02	; 2
 c1a:	91 05       	cpc	r25, r1
 c1c:	10 f4       	brcc	.+4      	; 0xc22 <malloc+0xe>
 c1e:	82 e0       	ldi	r24, 0x02	; 2
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	e0 91 32 02 	lds	r30, 0x0232
 c26:	f0 91 33 02 	lds	r31, 0x0233
 c2a:	20 e0       	ldi	r18, 0x00	; 0
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	40 e0       	ldi	r20, 0x00	; 0
 c30:	50 e0       	ldi	r21, 0x00	; 0
 c32:	28 c0       	rjmp	.+80     	; 0xc84 <malloc+0x70>
 c34:	60 81       	ld	r22, Z
 c36:	71 81       	ldd	r23, Z+1	; 0x01
 c38:	68 17       	cp	r22, r24
 c3a:	79 07       	cpc	r23, r25
 c3c:	c8 f0       	brcs	.+50     	; 0xc70 <malloc+0x5c>
 c3e:	68 17       	cp	r22, r24
 c40:	79 07       	cpc	r23, r25
 c42:	81 f4       	brne	.+32     	; 0xc64 <malloc+0x50>
 c44:	82 81       	ldd	r24, Z+2	; 0x02
 c46:	93 81       	ldd	r25, Z+3	; 0x03
 c48:	41 15       	cp	r20, r1
 c4a:	51 05       	cpc	r21, r1
 c4c:	31 f0       	breq	.+12     	; 0xc5a <malloc+0x46>
 c4e:	da 01       	movw	r26, r20
 c50:	13 96       	adiw	r26, 0x03	; 3
 c52:	9c 93       	st	X, r25
 c54:	8e 93       	st	-X, r24
 c56:	12 97       	sbiw	r26, 0x02	; 2
 c58:	2d c0       	rjmp	.+90     	; 0xcb4 <malloc+0xa0>
 c5a:	90 93 33 02 	sts	0x0233, r25
 c5e:	80 93 32 02 	sts	0x0232, r24
 c62:	28 c0       	rjmp	.+80     	; 0xcb4 <malloc+0xa0>
 c64:	21 15       	cp	r18, r1
 c66:	31 05       	cpc	r19, r1
 c68:	29 f0       	breq	.+10     	; 0xc74 <malloc+0x60>
 c6a:	62 17       	cp	r22, r18
 c6c:	73 07       	cpc	r23, r19
 c6e:	10 f0       	brcs	.+4      	; 0xc74 <malloc+0x60>
 c70:	b9 01       	movw	r22, r18
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <malloc+0x64>
 c74:	ea 01       	movw	r28, r20
 c76:	df 01       	movw	r26, r30
 c78:	af 01       	movw	r20, r30
 c7a:	9b 01       	movw	r18, r22
 c7c:	72 81       	ldd	r23, Z+2	; 0x02
 c7e:	63 81       	ldd	r22, Z+3	; 0x03
 c80:	e7 2f       	mov	r30, r23
 c82:	f6 2f       	mov	r31, r22
 c84:	30 97       	sbiw	r30, 0x00	; 0
 c86:	b1 f6       	brne	.-84     	; 0xc34 <malloc+0x20>
 c88:	21 15       	cp	r18, r1
 c8a:	31 05       	cpc	r19, r1
 c8c:	01 f1       	breq	.+64     	; 0xcce <malloc+0xba>
 c8e:	28 1b       	sub	r18, r24
 c90:	39 0b       	sbc	r19, r25
 c92:	24 30       	cpi	r18, 0x04	; 4
 c94:	31 05       	cpc	r19, r1
 c96:	80 f4       	brcc	.+32     	; 0xcb8 <malloc+0xa4>
 c98:	12 96       	adiw	r26, 0x02	; 2
 c9a:	8d 91       	ld	r24, X+
 c9c:	9c 91       	ld	r25, X
 c9e:	13 97       	sbiw	r26, 0x03	; 3
 ca0:	20 97       	sbiw	r28, 0x00	; 0
 ca2:	19 f0       	breq	.+6      	; 0xcaa <malloc+0x96>
 ca4:	9b 83       	std	Y+3, r25	; 0x03
 ca6:	8a 83       	std	Y+2, r24	; 0x02
 ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <malloc+0x9e>
 caa:	90 93 33 02 	sts	0x0233, r25
 cae:	80 93 32 02 	sts	0x0232, r24
 cb2:	fd 01       	movw	r30, r26
 cb4:	32 96       	adiw	r30, 0x02	; 2
 cb6:	46 c0       	rjmp	.+140    	; 0xd44 <malloc+0x130>
 cb8:	fd 01       	movw	r30, r26
 cba:	e2 0f       	add	r30, r18
 cbc:	f3 1f       	adc	r31, r19
 cbe:	81 93       	st	Z+, r24
 cc0:	91 93       	st	Z+, r25
 cc2:	22 50       	subi	r18, 0x02	; 2
 cc4:	30 40       	sbci	r19, 0x00	; 0
 cc6:	11 96       	adiw	r26, 0x01	; 1
 cc8:	3c 93       	st	X, r19
 cca:	2e 93       	st	-X, r18
 ccc:	3b c0       	rjmp	.+118    	; 0xd44 <malloc+0x130>
 cce:	20 91 30 02 	lds	r18, 0x0230
 cd2:	30 91 31 02 	lds	r19, 0x0231
 cd6:	21 15       	cp	r18, r1
 cd8:	31 05       	cpc	r19, r1
 cda:	41 f4       	brne	.+16     	; 0xcec <malloc+0xd8>
 cdc:	20 91 64 00 	lds	r18, 0x0064
 ce0:	30 91 65 00 	lds	r19, 0x0065
 ce4:	30 93 31 02 	sts	0x0231, r19
 ce8:	20 93 30 02 	sts	0x0230, r18
 cec:	20 91 66 00 	lds	r18, 0x0066
 cf0:	30 91 67 00 	lds	r19, 0x0067
 cf4:	21 15       	cp	r18, r1
 cf6:	31 05       	cpc	r19, r1
 cf8:	41 f4       	brne	.+16     	; 0xd0a <malloc+0xf6>
 cfa:	2d b7       	in	r18, 0x3d	; 61
 cfc:	3e b7       	in	r19, 0x3e	; 62
 cfe:	40 91 62 00 	lds	r20, 0x0062
 d02:	50 91 63 00 	lds	r21, 0x0063
 d06:	24 1b       	sub	r18, r20
 d08:	35 0b       	sbc	r19, r21
 d0a:	e0 91 30 02 	lds	r30, 0x0230
 d0e:	f0 91 31 02 	lds	r31, 0x0231
 d12:	e2 17       	cp	r30, r18
 d14:	f3 07       	cpc	r31, r19
 d16:	a0 f4       	brcc	.+40     	; 0xd40 <malloc+0x12c>
 d18:	2e 1b       	sub	r18, r30
 d1a:	3f 0b       	sbc	r19, r31
 d1c:	28 17       	cp	r18, r24
 d1e:	39 07       	cpc	r19, r25
 d20:	78 f0       	brcs	.+30     	; 0xd40 <malloc+0x12c>
 d22:	ac 01       	movw	r20, r24
 d24:	4e 5f       	subi	r20, 0xFE	; 254
 d26:	5f 4f       	sbci	r21, 0xFF	; 255
 d28:	24 17       	cp	r18, r20
 d2a:	35 07       	cpc	r19, r21
 d2c:	48 f0       	brcs	.+18     	; 0xd40 <malloc+0x12c>
 d2e:	4e 0f       	add	r20, r30
 d30:	5f 1f       	adc	r21, r31
 d32:	50 93 31 02 	sts	0x0231, r21
 d36:	40 93 30 02 	sts	0x0230, r20
 d3a:	81 93       	st	Z+, r24
 d3c:	91 93       	st	Z+, r25
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <malloc+0x130>
 d40:	e0 e0       	ldi	r30, 0x00	; 0
 d42:	f0 e0       	ldi	r31, 0x00	; 0
 d44:	cf 01       	movw	r24, r30
 d46:	df 91       	pop	r29
 d48:	cf 91       	pop	r28
 d4a:	08 95       	ret

00000d4c <free>:
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	00 97       	sbiw	r24, 0x00	; 0
 d52:	09 f4       	brne	.+2      	; 0xd56 <free+0xa>
 d54:	91 c0       	rjmp	.+290    	; 0xe78 <free+0x12c>
 d56:	fc 01       	movw	r30, r24
 d58:	32 97       	sbiw	r30, 0x02	; 2
 d5a:	13 82       	std	Z+3, r1	; 0x03
 d5c:	12 82       	std	Z+2, r1	; 0x02
 d5e:	60 91 32 02 	lds	r22, 0x0232
 d62:	70 91 33 02 	lds	r23, 0x0233
 d66:	61 15       	cp	r22, r1
 d68:	71 05       	cpc	r23, r1
 d6a:	81 f4       	brne	.+32     	; 0xd8c <free+0x40>
 d6c:	20 81       	ld	r18, Z
 d6e:	31 81       	ldd	r19, Z+1	; 0x01
 d70:	28 0f       	add	r18, r24
 d72:	39 1f       	adc	r19, r25
 d74:	80 91 30 02 	lds	r24, 0x0230
 d78:	90 91 31 02 	lds	r25, 0x0231
 d7c:	82 17       	cp	r24, r18
 d7e:	93 07       	cpc	r25, r19
 d80:	99 f5       	brne	.+102    	; 0xde8 <free+0x9c>
 d82:	f0 93 31 02 	sts	0x0231, r31
 d86:	e0 93 30 02 	sts	0x0230, r30
 d8a:	76 c0       	rjmp	.+236    	; 0xe78 <free+0x12c>
 d8c:	db 01       	movw	r26, r22
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	02 c0       	rjmp	.+4      	; 0xd98 <free+0x4c>
 d94:	cd 01       	movw	r24, r26
 d96:	d9 01       	movw	r26, r18
 d98:	ae 17       	cp	r26, r30
 d9a:	bf 07       	cpc	r27, r31
 d9c:	48 f4       	brcc	.+18     	; 0xdb0 <free+0x64>
 d9e:	12 96       	adiw	r26, 0x02	; 2
 da0:	2d 91       	ld	r18, X+
 da2:	3c 91       	ld	r19, X
 da4:	13 97       	sbiw	r26, 0x03	; 3
 da6:	21 15       	cp	r18, r1
 da8:	31 05       	cpc	r19, r1
 daa:	a1 f7       	brne	.-24     	; 0xd94 <free+0x48>
 dac:	cd 01       	movw	r24, r26
 dae:	21 c0       	rjmp	.+66     	; 0xdf2 <free+0xa6>
 db0:	b3 83       	std	Z+3, r27	; 0x03
 db2:	a2 83       	std	Z+2, r26	; 0x02
 db4:	ef 01       	movw	r28, r30
 db6:	49 91       	ld	r20, Y+
 db8:	59 91       	ld	r21, Y+
 dba:	9e 01       	movw	r18, r28
 dbc:	24 0f       	add	r18, r20
 dbe:	35 1f       	adc	r19, r21
 dc0:	a2 17       	cp	r26, r18
 dc2:	b3 07       	cpc	r27, r19
 dc4:	79 f4       	brne	.+30     	; 0xde4 <free+0x98>
 dc6:	2d 91       	ld	r18, X+
 dc8:	3c 91       	ld	r19, X
 dca:	11 97       	sbiw	r26, 0x01	; 1
 dcc:	24 0f       	add	r18, r20
 dce:	35 1f       	adc	r19, r21
 dd0:	2e 5f       	subi	r18, 0xFE	; 254
 dd2:	3f 4f       	sbci	r19, 0xFF	; 255
 dd4:	31 83       	std	Z+1, r19	; 0x01
 dd6:	20 83       	st	Z, r18
 dd8:	12 96       	adiw	r26, 0x02	; 2
 dda:	2d 91       	ld	r18, X+
 ddc:	3c 91       	ld	r19, X
 dde:	13 97       	sbiw	r26, 0x03	; 3
 de0:	33 83       	std	Z+3, r19	; 0x03
 de2:	22 83       	std	Z+2, r18	; 0x02
 de4:	00 97       	sbiw	r24, 0x00	; 0
 de6:	29 f4       	brne	.+10     	; 0xdf2 <free+0xa6>
 de8:	f0 93 33 02 	sts	0x0233, r31
 dec:	e0 93 32 02 	sts	0x0232, r30
 df0:	43 c0       	rjmp	.+134    	; 0xe78 <free+0x12c>
 df2:	dc 01       	movw	r26, r24
 df4:	13 96       	adiw	r26, 0x03	; 3
 df6:	fc 93       	st	X, r31
 df8:	ee 93       	st	-X, r30
 dfa:	12 97       	sbiw	r26, 0x02	; 2
 dfc:	4d 91       	ld	r20, X+
 dfe:	5d 91       	ld	r21, X+
 e00:	a4 0f       	add	r26, r20
 e02:	b5 1f       	adc	r27, r21
 e04:	ea 17       	cp	r30, r26
 e06:	fb 07       	cpc	r31, r27
 e08:	69 f4       	brne	.+26     	; 0xe24 <free+0xd8>
 e0a:	20 81       	ld	r18, Z
 e0c:	31 81       	ldd	r19, Z+1	; 0x01
 e0e:	24 0f       	add	r18, r20
 e10:	35 1f       	adc	r19, r21
 e12:	2e 5f       	subi	r18, 0xFE	; 254
 e14:	3f 4f       	sbci	r19, 0xFF	; 255
 e16:	ec 01       	movw	r28, r24
 e18:	39 83       	std	Y+1, r19	; 0x01
 e1a:	28 83       	st	Y, r18
 e1c:	22 81       	ldd	r18, Z+2	; 0x02
 e1e:	33 81       	ldd	r19, Z+3	; 0x03
 e20:	3b 83       	std	Y+3, r19	; 0x03
 e22:	2a 83       	std	Y+2, r18	; 0x02
 e24:	e0 e0       	ldi	r30, 0x00	; 0
 e26:	f0 e0       	ldi	r31, 0x00	; 0
 e28:	02 c0       	rjmp	.+4      	; 0xe2e <free+0xe2>
 e2a:	fb 01       	movw	r30, r22
 e2c:	bc 01       	movw	r22, r24
 e2e:	db 01       	movw	r26, r22
 e30:	12 96       	adiw	r26, 0x02	; 2
 e32:	8d 91       	ld	r24, X+
 e34:	9c 91       	ld	r25, X
 e36:	13 97       	sbiw	r26, 0x03	; 3
 e38:	00 97       	sbiw	r24, 0x00	; 0
 e3a:	b9 f7       	brne	.-18     	; 0xe2a <free+0xde>
 e3c:	9b 01       	movw	r18, r22
 e3e:	2e 5f       	subi	r18, 0xFE	; 254
 e40:	3f 4f       	sbci	r19, 0xFF	; 255
 e42:	8d 91       	ld	r24, X+
 e44:	9c 91       	ld	r25, X
 e46:	11 97       	sbiw	r26, 0x01	; 1
 e48:	82 0f       	add	r24, r18
 e4a:	93 1f       	adc	r25, r19
 e4c:	40 91 30 02 	lds	r20, 0x0230
 e50:	50 91 31 02 	lds	r21, 0x0231
 e54:	48 17       	cp	r20, r24
 e56:	59 07       	cpc	r21, r25
 e58:	79 f4       	brne	.+30     	; 0xe78 <free+0x12c>
 e5a:	30 97       	sbiw	r30, 0x00	; 0
 e5c:	29 f4       	brne	.+10     	; 0xe68 <free+0x11c>
 e5e:	10 92 33 02 	sts	0x0233, r1
 e62:	10 92 32 02 	sts	0x0232, r1
 e66:	02 c0       	rjmp	.+4      	; 0xe6c <free+0x120>
 e68:	13 82       	std	Z+3, r1	; 0x03
 e6a:	12 82       	std	Z+2, r1	; 0x02
 e6c:	22 50       	subi	r18, 0x02	; 2
 e6e:	30 40       	sbci	r19, 0x00	; 0
 e70:	30 93 31 02 	sts	0x0231, r19
 e74:	20 93 30 02 	sts	0x0230, r18
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	08 95       	ret

00000e7e <memset>:
 e7e:	dc 01       	movw	r26, r24
 e80:	01 c0       	rjmp	.+2      	; 0xe84 <memset+0x6>
 e82:	6d 93       	st	X+, r22
 e84:	41 50       	subi	r20, 0x01	; 1
 e86:	50 40       	sbci	r21, 0x00	; 0
 e88:	e0 f7       	brcc	.-8      	; 0xe82 <memset+0x4>
 e8a:	08 95       	ret

00000e8c <__epilogue_restores__>:
 e8c:	2a 88       	ldd	r2, Y+18	; 0x12
 e8e:	39 88       	ldd	r3, Y+17	; 0x11
 e90:	48 88       	ldd	r4, Y+16	; 0x10
 e92:	5f 84       	ldd	r5, Y+15	; 0x0f
 e94:	6e 84       	ldd	r6, Y+14	; 0x0e
 e96:	7d 84       	ldd	r7, Y+13	; 0x0d
 e98:	8c 84       	ldd	r8, Y+12	; 0x0c
 e9a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e9c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e9e:	b9 84       	ldd	r11, Y+9	; 0x09
 ea0:	c8 84       	ldd	r12, Y+8	; 0x08
 ea2:	df 80       	ldd	r13, Y+7	; 0x07
 ea4:	ee 80       	ldd	r14, Y+6	; 0x06
 ea6:	fd 80       	ldd	r15, Y+5	; 0x05
 ea8:	0c 81       	ldd	r16, Y+4	; 0x04
 eaa:	1b 81       	ldd	r17, Y+3	; 0x03
 eac:	aa 81       	ldd	r26, Y+2	; 0x02
 eae:	b9 81       	ldd	r27, Y+1	; 0x01
 eb0:	ce 0f       	add	r28, r30
 eb2:	d1 1d       	adc	r29, r1
 eb4:	0f b6       	in	r0, 0x3f	; 63
 eb6:	f8 94       	cli
 eb8:	de bf       	out	0x3e, r29	; 62
 eba:	0f be       	out	0x3f, r0	; 63
 ebc:	cd bf       	out	0x3d, r28	; 61
 ebe:	ed 01       	movw	r28, r26
 ec0:	08 95       	ret

00000ec2 <_exit>:
 ec2:	f8 94       	cli

00000ec4 <__stop_program>:
 ec4:	ff cf       	rjmp	.-2      	; 0xec4 <__stop_program>
